class Solution {
    int size[];
    int parent[];

    public int find(int x) {
        if (parent[x] != x)
            return find(parent[x]);
        return x;
    }

    public void join(int x, int y) {
        int a = find(x);
        int b = find(y);
        if (a != b) {
            if (size[a] > size[b]) {
                parent[b] = a;
                size[a] += size[b];
            } else {
                parent[a] = b;
                size[b] += size[a];
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        size = new int[graph.length];
        parent = new int[graph.length];
        for (int i = 0; i < graph.length; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        Set<Integer> set = new HashSet<>();
        for (int i : initial)
            set.add(i);

        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph.length; j++) {
                if (graph[i][j] == 1 && !set.contains(i) && !set.contains(j)) {
                    join(i, j);
                }
            }
        }

        int max = -1;
        int res = Integer.MAX_VALUE;
        int infected[] = new int[graph.length];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int x : initial) {
            map.put(x, new ArrayList<>());
            for (int i = 0; i < graph.length; i++) {
                if (graph[x][i] == 1 && !set.contains(i) && x != i) {
                    int temp = find(i);
                    if (!map.get(x).contains(temp)) {
                        map.get(x).add(temp);
                        infected[temp]++;
                    }
                }
            }
            // if(infected[i]==1 && sum>=max){
            // if(max==sum) res = Math.min(res,x);
            // else res = x;
            // max = Math.max(max,sum);
            // }
            // System.out.println(sum);
        }
        //System.out.println(map);

        for (int x : initial) {
            int sum = 0;
            for (int i : map.get(x)) {
                // int temp = find(i);
                if (infected[i] == 1)
                    sum += size[i];
            }
            if (sum >= max) {
                if (max == sum)
                    res = Math.min(res, x);
                else
                    res = x;
                max = Math.max(max, sum);
            }
            //System.out.println(sum);

        }
        if (res == Integer.MAX_VALUE) {
            for (int i : initial)
                res = Math.min(res, i);
        }
        return res;

    }
}