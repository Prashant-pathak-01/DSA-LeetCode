class Solution {
    int parent[];
    int size[];
    public int find(int x){
        if(parent[x]!=x) return find(parent[x]);
        return x;
    }
    public void join(int x, int y){
        int a = find(x);
        int b = find(y);
        if(a!=b){
            if(size[a]>size[b]){
                parent[b] = a;
                size[a]+=size[b];
            }else{
                parent[a] = b;
                size[b]+=size[a];
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];

        for(int i=0; i<graph.length; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        for(int i=0; i<graph.length; i++){
            for(int j=0; j<graph.length; j++){
                if(graph[i][j]==1) join(i,j);
            }
        }
        int max = -1;
        int res = Integer.MAX_VALUE;

        int sameParent[] = new int[graph.length];
        for(int x:initial){
            int a = find(x);
            sameParent[a]++;
        }
        for(int x:initial){
            int a = find(x);
            if(sameParent[a]==1 && size[a]>=max){
                if(max==size[a]){
                    res = Math.min(res,x);
                }else res = x;
                max = Math.max(max,size[a]);
            }
        }
        if(res==Integer.MAX_VALUE){
            for(int x:initial) res = Math.min(res,x);
        }
        return res;
    }
}